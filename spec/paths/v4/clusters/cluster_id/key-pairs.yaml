get:
  operationId: getKeyPairs
  tags:
    - key pairs
  summary: Get key pairs
  description: >
    Returns a list of information on all key pairs of a cluster as an array.


    The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
  parameters:
    - $ref: "../../../../components.yaml#/components/parameters/RequiredGiantSwarmAuthorizationHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XRequestIDHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XGiantSwarmActivityHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XGiantSwarmCmdLineHeader"
    - $ref: "../../../../components.yaml#/components/parameters/ClusterIdPathParameter"
  responses:
    "200":
      description: Key pairs
      content:
        application/json:
          schema:
            $ref: "../../../../components.yaml#/components/schemas/V4GetKeyPairsResponse"
    "401":
      $ref: "../../../../components.yaml#/components/responses/V4Generic401Response"
    default:
      description: error
      content:
        application/json:
          schema:
            $ref: "../../../../components.yaml#/components/schemas/V4GenericResponse"
post:
  operationId: addKeyPair
  tags:
    - key pairs
  summary: Create key pair
  parameters:
    - $ref: "../../../../components.yaml#/components/parameters/RequiredGiantSwarmAuthorizationHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XRequestIDHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XGiantSwarmActivityHeader"
    - $ref: "../../../../components.yaml#/components/parameters/XGiantSwarmCmdLineHeader"
    - $ref: "../../../../components.yaml#/components/parameters/ClusterIdPathParameter"
  requestBody:
    content:
      application/json:
        schema:
          $ref: "../../../../components.yaml#/components/schemas/V4AddKeyPairRequest"
    description: >
      While the `ttl_hours` attribute is optional and will be set to a
      default value when omitted, the `description` is mandatory.
    required: true
    x-examples:
      application/json:
        description: Admin key pair lasting twelve hours
        ttl_hours: 12
        certificate_organizations: system:masters
  description: >
    This operation allows to create a new key pair for accessing a specific
    cluster.


    A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.


    In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.


    ### Customizing the certificate's subject for K8s RBAC


    It is possible to set the Common Name and Organization fields of the generated certificate's subject.


    - `cn_prefix`: The certificate's common name uses this format: `.user.`.

      `clusterdomain` is specific to your cluster and is not editable.

      The `cn_prefix` however is editable. When left blank it will default
      to the email address of the Giant Swarm user that is performing the
      create key pair request.

      The common name is used as the username for requests to the Kubernetes API. This allows you
      to set up role-based access controls.


    - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.
      The Kubernetes API will use these values as group memberships.

    __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
  responses:
    "200":
      description: Success
      content:
        application/json:
          schema:
            $ref: "../../../../components.yaml#/components/schemas/V4AddKeyPairResponse"
          examples:
            response:
              value:
                certificate_authority_data: -----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----
                client_key_data: -----BEGIN RSA PRIVATE KEY-----...-----END RSA PRIVATE
                  KEY-----
                client_certificate_data: -----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----
                create_date: 2016-06-01T12:00:00.000Z
                description: Key pair description
                id: 02:cc:da:f9:fb:ce:c3:e5:e1:f6:27:d8:43:48:0d:37:4a:ee:b9:67
                ttl_hours: 8640
    "401":
      $ref: "../../../../components.yaml#/components/responses/V4Generic401Response"
